{"version":3,"sources":["components/Gif/index.js","components/ListOfGifs/index.js","components/Spinner/index.js","services/getGifs.js","context/GifsContext.js","hooks/useGifs.js","pages/Home/index.js","pages/SearchResults/index.js","pages/Detail/index.js","components/Search/index.js","context/StaticContext.js","components/ActiveLink/index.js","hooks/useHashLocation.js","App.js","serviceWorker.js","index.js"],"names":["Gif","title","id","url","className","to","loading","key","src","alt","ListOfGifs","gifs","map","gif","Spinner","apiKey","getGits","keyword","apiURL","fetch","then","res","json","response","data","Array","isArray","image","images","downsized_medium","Context","React","createContext","GifsContextProvider","children","useState","setGifs","Provider","value","useGifs","setLoading","useContext","GifsContext","useEffect","localStorage","getItem","setItem","Home","SearchResults","params","Detail","find","singleGif","Search","setKeyword","useLocation","pushLocation","onSubmit","evt","preventDefault","type","onChange","target","placeholder","name","learning","ActiveLink","props","useRoute","href","isActive","currentLoc","window","location","hash","replace","useHashLocation","loc","setLoc","handler","addEventListener","removeEventListener","useCallback","App","StaticContext","hook","component","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb89deab.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'wouter'\nimport './styles.css'\n\nexport default function Gif ({ title, id, url}) {\n  return (\n    <div className='gif'>\n      <Link to={`/gif/${id}`}>\n        <img loading='lazy' className='gif__img' key={id} src={url} alt={title} />\n        <div className='gif__title'>{title}</div>\n      </Link>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport Gif from '../Gif';\nimport './styles.css'\n\nexport default function ListOfGifs ({ gifs }) {\n  return <div className='ListOfGifs'>\n    {\n      gifs.map(gif => <Gif\n        key={gif.id}\n        id={gif.id}\n        title={gif.title}\n        url={gif.url}\n        />)\n    }\n  </div>\n}\n","import React from 'react'\nimport './styles.css'\n\nexport default function Spinner () {\n  return <div className='spinner'>Loading</div>\n}\n","const apiKey = '2Qxzc5KLKUrAtMUUsbJaMMI6TzNYJwd3'\n\nexport default function getGits ({keyword = 'morty'} = {}) {\n  const apiURL = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${keyword}&limit=25&offset=0&rating=g&lang=en`\n\n  return fetch(apiURL)\n  .then(res => res.json())\n  .then(response => {\n    const {data = []} = response\n    if(Array.isArray(data)) {\n      const gifs = data.map(image => {\n        const {images, title, id} = image\n        const {url} = images.downsized_medium\n        return {title, id, url}\n      })\n      return gifs\n    }\n  })\n}\n","import React, { useState } from 'react'\n\nconst Context = React.createContext({})\n\nexport function GifsContextProvider ({ children }) {\n  const [gifs, setGifs] = useState([])\n\n  return <Context.Provider value={{gifs, setGifs}}>\n    {children}\n  </Context.Provider>\n}\n\nexport default Context\n","import {useContext, useEffect, useState} from 'react'\nimport getGits from '../services/getGifs';\nimport GifsContext from '../context/GifsContext'\n\nexport function useGifs ({ keyword } = { keyword: null}) {\n  const [loading, setLoading] = useState(false)\n  const {gifs, setGifs} = useContext(GifsContext)\n\n  useEffect(function () {\n    setLoading(true)\n    const keywordToUse = keyword || localStorage.getItem('lastKeyword')\n    getGits({ keyword: keywordToUse })\n      .then(gifs => {\n        setGifs(gifs)\n        setLoading(false)\n        localStorage.setItem('lastKeyword', keyword)\n      })\n  }, [keyword, setGifs])\n\n  return {loading, gifs}\n}\n","import React from 'react'\nimport ListOfGifs from '../../components/ListOfGifs'\nimport Spinner from '../../components/Spinner'\nimport { useGifs } from '../../hooks/useGifs'\n\nexport default function Home () {\n  const {loading, gifs} = useGifs()\n\n  return (\n    <div className='Home'>\n      { loading\n      ? <Spinner />\n      : <ListOfGifs gifs={gifs} />\n      }\n    </div>\n  )\n}\n","import React from 'react'\nimport Spinner from '../../components/Spinner';\nimport ListOfGifs from '../../components/ListOfGifs';\nimport {useGifs} from '../../hooks/useGifs'\n\nexport default function SearchResults ({ params }) {\n  const { keyword } = params\n  const { loading, gifs } = useGifs({ keyword })\n\n  return <div>\n    { loading\n      ? <Spinner />\n      : <ListOfGifs gifs={gifs} />\n    }\n  </div>\n}\n","import React, { useContext } from 'react'\nimport GifsContext from '../../context/GifsContext'\nimport Gif from '../../components/Gif'\n\nexport default function Detail ({ params }) {\n  const {gifs} = useContext(GifsContext)\n\n  const gif = gifs.find(singleGif =>\n    singleGif.id === params.id\n  )\n\n  return <Gif {...gif} />\n}\n","import React, {useState} from 'react'\nimport './styles.css'\nimport { useLocation } from 'wouter'\n\nexport default function Search () {\n  const [keyword, setKeyword] = useState('')\n  const [path, pushLocation] = useLocation()\n\n  const handleSubmit = evt => {\n    evt.preventDefault()\n    const keywordToUse = keyword || ''\n    pushLocation(`/${keywordToUse}`)\n  }\n\n  const handleChange = evt => {\n    setKeyword(evt.target.value)\n  }\n\n\n  return <div className='Search'>\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"search\"\n        className='Search__input'\n        onChange={handleChange}\n        value={keyword}\n        placeholder='Search for gifs!'\n        />\n      <button className='Search__button'>Search</button>\n    </form>\n  </div>\n}\n","import React from 'react'\n\nconst Context = React.createContext({\n  name: 'Manu Morante (no provider)',\n  learning: true\n})\n\nexport default Context\n","import React from 'react'\nimport { Link, useRoute} from 'wouter'\n\nexport default function ActiveLink (props) {\n  const [isActive] = useRoute(props.href);\n\n  return (\n    <Link {...props}>\n      <a className={isActive ? \"active\" : \"\"}>{props.children}</a>\n    </Link>\n  );\n};\n","import {useState, useEffect, useCallback} from 'react'\n\nconst currentLoc = () => window.location.hash.replace('#', '') ||'/';\n\nexport default function useHashLocation () {\n  const [loc, setLoc] = useState(currentLoc());\n\n  useEffect(() => {\n    const handler = () => setLoc(currentLoc());\n\n    // subscribe on hash changes\n    window.addEventListener(\"hashchange\", handler);\n    return () => window.removeEventListener(\"hashchange\", handler);\n  }, []);\n\n  const navigate = useCallback(to => (window.location.hash = to), []);\n  return [loc, navigate];\n};\n","import React from 'react'\nimport './App.css'\nimport { Link, Route, Router } from 'wouter'\nimport Home from './pages/Home'\nimport SearchResults from './pages/SearchResults'\nimport Detail from './pages/Detail'\nimport Search from './components/Search'\nimport StaticContext from './context/StaticContext'\nimport { GifsContextProvider } from './context/GifsContext'\nimport ActiveLink from './components/ActiveLink'\nimport useHashLocation from './hooks/useHashLocation'\n\nexport default function App() {\n  return (\n    <StaticContext.Provider value={\n      {\n        name: 'Manu Morante',\n        learning: true\n      }\n    }>\n      <div className=\"App\">\n        <section className=\"App-content\">\n          <Router hook={useHashLocation}>\n            <h1><Link to='/'>Giffs</Link></h1>\n\n            <Search />\n\n            <p><ActiveLink href=\"/\">Home</ActiveLink></p>\n            <p><ActiveLink href=\"/panda\">Search panda</ActiveLink></p>\n            <p><ActiveLink href=\"/batman\">Search batman</ActiveLink></p>\n\n            <GifsContextProvider>\n              <Route\n                component={Home}\n                path='/' />\n\n              <Route\n                component={SearchResults}\n                path='/:keyword' />\n\n              <Route\n                component={Detail}\n                path='/gif/:id' />\n            </GifsContextProvider>\n          </Router>\n        </section>\n      </div>\n    </StaticContext.Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}