{"version":3,"sources":["services/setting.js","components/Gif/index.js","components/ListOfGifs/index.js","components/Spinner/index.js","services/getGifs.js","context/GifsContext.js","hooks/useGifs.js","components/ContentLoader/index.js","components/TrendingSearches/index.js","hooks/useNearScreen.js","pages/Home/index.js","pages/SearchResults/index.js","pages/Detail/index.js","hooks/useHashLocation.js","pages/Info/index.js","pages/Contact/index.js","components/ActiveLink/index.js","components/Menu/index.js","components/Search/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["API_KEY","API_URL","Gif","gif","title","id","url","width","height","className","style","to","loading","key","src","alt","ListOfGifs","gifs","map","Spinner","fromApiResponseToGifs","apiResponse","data","Array","isArray","image","images","downsized_medium","getGits","limit","keyword","page","apiURL","fetch","then","res","json","Context","React","createContext","GifsContextProvider","children","useState","setGifs","Provider","value","useGifs","setLoading","loadingNextPage","setLoadingNextPage","setPage","useContext","GifsContext","keywordToUse","localStorage","getItem","useEffect","setItem","nextGifs","prevGifs","concat","MyLoader","props","speed","viewBox","backgroundColor","foregroundColor","cx","cy","r","x","y","rx","ry","TrendingSearches","lazy","LazyTrending","distance","isNearScreen","setShow","fromRef","useRef","observer","IntersectionObserver","entries","isIntersecting","disconnect","rootMargin","observe","current","useNearScreen","ref","fallback","ContentLoader","Home","SearchResults","params","onClick","prevPage","Detail","find","singleGif","currentLoc","window","location","hash","replace","useHashLocation","loc","setLoc","handler","addEventListener","removeEventListener","useCallback","Info","Contact","ActiveLink","useRoute","href","isActive","Menu","Search","setKeyword","useLocation","pushLocation","onSubmit","evt","preventDefault","type","onChange","target","placeholder","Header","App","hook","component","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.818c6d92.chunk.js","sourcesContent":["export const API_KEY = '2Qxzc5KLKUrAtMUUsbJaMMI6TzNYJwd3'\nexport const API_URL = `https://api.giphy.com/v1`\n","import React from 'react'\nimport { Link } from 'wouter'\nimport './styles.css'\n\nexport default function Gif (gif) {\n  const { title, id, url, width, height } = gif\n\n  return (\n    <div className='gif' style={{width: width, height: height}}>\n      <Link to={`/gif/${id}`}>\n        <img loading='lazy' className='gif__img' key={id} src={url} alt={title} />\n        <div className='gif__title'>{title}</div>\n      </Link>\n    </div>\n  )\n}\n","import React from 'react'\nimport Gif from 'components/Gif';\nimport './styles.css'\n\nexport default function ListOfGifs ({ gifs }) {\n  return <div className='ListOfGifs'>\n\n    {\n      gifs.map(gif => <Gif\n        key={gif.id}\n        id={gif.id}\n        title={gif.title}\n        url={gif.url}\n        />)\n    }\n  </div>\n}\n","import React from 'react'\nimport './styles.css'\n\nexport default function Spinner () {\n  return <div className='spinner'>Loading</div>\n}\n","import {API_KEY, API_URL} from './setting'\n\nconst fromApiResponseToGifs = apiResponse => {\n  const {data = []} = apiResponse\n  if(Array.isArray(data)) {\n    const gifs = data.map(image => {\n      const {images, title, id} = image\n      const {url} = images.downsized_medium\n      return {title, id, url}\n    })\n    return gifs\n  }\n  return []\n}\n\nexport default function getGits ({limit = 25, keyword = 'morty', page = 0} = {}) {\n  const apiURL = `${API_URL}/gifs/search?api_key=${API_KEY}&q=${keyword}&limit=${limit}&offset=${page * limit}&rating=g&lang=en`\n\n  return fetch(apiURL)\n  .then(res => res.json())\n  .then(fromApiResponseToGifs)\n}\n","import React, { useState } from 'react'\n\nconst Context = React.createContext({})\n\nexport function GifsContextProvider ({ children }) {\n  const [gifs, setGifs] = useState([])\n\n  return <Context.Provider value={{gifs, setGifs}}>\n    {children}\n  </Context.Provider>\n}\n\nexport default Context\n","import {useContext, useEffect, useState} from 'react'\nimport getGits from 'services/getGifs';\nimport GifsContext from 'context/GifsContext'\n\nconst INITIAL_PAGE = 0\n\nexport function useGifs ({ keyword } = { keyword: 'rick and morty'}) {\n  const [loading, setLoading] = useState(false)\n  const [loadingNextPage, setLoadingNextPage] = useState(false)\n  const [page, setPage] = useState(INITIAL_PAGE)\n  const {gifs, setGifs} = useContext(GifsContext)\n\n  const keywordToUse = keyword || localStorage.getItem('lastKeyword') || 'random'\n\n  useEffect(function () {\n    setLoading(true)\n    getGits({ keyword: keywordToUse })\n      .then(gifs => {\n        setGifs(gifs)\n        setLoading(false)\n        localStorage.setItem('lastKeyword', keyword)\n      })\n  }, [keyword, setGifs, keywordToUse])\n\n  useEffect(function(){\n    if(page == INITIAL_PAGE) return\n\n    setLoadingNextPage(true)\n\n    getGits({ keyword: keywordToUse, page })\n      .then(nextGifs => {\n        setGifs(prevGifs => prevGifs.concat(nextGifs))\n        setLoadingNextPage(false)\n      })\n\n  }, [page])\n\n  return {loading, gifs, loadingNextPage, setPage}\n}\n","import React from \"react\"\nimport ContentLoader from \"react-content-loader\"\n\nconst MyLoader = (props) => (\n  <ContentLoader\n    speed={2}\n    width={250}\n    height={250}\n    viewBox=\"0 0 250 250\"\n    backgroundColor=\"#454545\"\n    foregroundColor=\"#6b6b6b\"\n    {...props}\n  >\n    <circle cx=\"22\" cy=\"170\" r=\"18\" />\n    <rect x=\"57\" y=\"159\" rx=\"2\" ry=\"2\" width=\"140\" height=\"10\" />\n    <rect x=\"1\" y=\"1\" rx=\"2\" ry=\"2\" width=\"240\" height=\"136\" />\n    <rect x=\"58\" y=\"178\" rx=\"2\" ry=\"2\" width=\"81\" height=\"8\" />\n  </ContentLoader>\n)\n\nexport default MyLoader\n","import React, { Suspense } from 'react'\nimport useNearScreen from 'hooks/useNearScreen'\nimport ContentLoader from 'components/ContentLoader'\n\nconst TrendingSearches = React.lazy(\n  () => import('./TrendingSearches')\n)\n\nexport default function LazyTrending () {\n  const {isNearScreen, fromRef} = useNearScreen({ distance: '0px'})\n\n  return <div ref={fromRef}>\n    <Suspense fallback={<ContentLoader />}>\n      {isNearScreen ? <TrendingSearches /> : null}\n    </Suspense>\n  </div>\n}\n","import { useEffect, useRef, useState } from 'react'\n\n\nexport default function useNearScreen ({ distance = '100px' } = {}) {\n  const [isNearScreen, setShow] = useState(false)\n  const fromRef = useRef()\n\n  useEffect(function(){\n    const onChange = (entries, observer) => {\n      const el = entries[0]\n      if(el.isIntersecting) {\n        setShow(true)\n        observer.disconnect()\n      }\n    }\n\n    const observer = new IntersectionObserver(onChange, {\n      rootMargin: distance\n    })\n\n    observer.observe(fromRef.current)\n\n    return() => observer.disconnect()\n  })\n\n  return {isNearScreen, fromRef}\n}\n","import React from 'react'\nimport ListOfGifs from 'components/ListOfGifs'\nimport Spinner from 'components/Spinner'\nimport { useGifs } from 'hooks/useGifs'\nimport TrendingSearches from 'components/TrendingSearches'\n\nexport default function Home () {\n  const {loading, gifs} = useGifs()\n\n  return (\n    <div className='Home'>\n      { loading\n      ? <Spinner />\n      : <ListOfGifs gifs={gifs} />\n      }\n\n      <TrendingSearches />\n    </div>\n  )\n}\n","import React from 'react'\nimport Spinner from 'components/Spinner';\nimport ListOfGifs from 'components/ListOfGifs';\nimport {useGifs} from 'hooks/useGifs'\n\nexport default function SearchResults ({ params }) {\n  const { keyword } = params\n  const { loading, gifs, setPage } = useGifs({ keyword })\n\n  const handleNextPage = () => setPage(prevPage => prevPage + 1)\n\n  return <div>\n    {loading\n      ? <Spinner />\n      : <>\n        <h4>Searching for '{keyword}'</h4>\n        <ListOfGifs gifs={gifs} />\n        </>\n    }\n    <button onClick={handleNextPage}>Next</button>\n  </div>\n}\n","import React, { useContext } from 'react'\nimport GifsContext from 'context/GifsContext'\nimport Gif from 'components/Gif'\n\nexport default function Detail ({ params }) {\n  const {gifs} = useContext(GifsContext)\n\n  const gif = gifs.find(singleGif =>\n    singleGif.id === params.id\n  )\n\n  return <Gif {...gif} />\n}\n","import {useState, useEffect, useCallback} from 'react'\n\nconst currentLoc = () => window.location.hash.replace('#', '') ||'/';\n\nexport default function useHashLocation () {\n  const [loc, setLoc] = useState(currentLoc());\n\n  useEffect(() => {\n    const handler = () => setLoc(currentLoc());\n\n    // subscribe on hash changes\n    window.addEventListener(\"hashchange\", handler);\n    return () => window.removeEventListener(\"hashchange\", handler);\n  }, []);\n\n  const navigate = useCallback(to => (window.location.hash = to), []);\n  return [loc, navigate];\n};\n","import React from 'react'\n\nexport default function Info () {\n  return <div>\n    Info page\n  </div>\n}\n","import React from 'react'\n\nexport default function Contact () {\n  return <div>\n    Contact page\n  </div>\n}\n","import React from 'react'\nimport { Link, useRoute} from 'wouter'\n\nexport default function ActiveLink (props) {\n  const [isActive] = useRoute(props.href);\n\n  return (\n    <Link {...props}>\n      <a className={isActive ? \"active\" : \"\"}>{props.children}</a>\n    </Link>\n  );\n};\n","import React from 'react'\nimport ActiveLink from 'components/ActiveLink'\nimport './styles.css'\n\nexport default function Menu () {\n  return (\n    <ul className='Menu'>\n      <li className='Menu__link'>\n        <ActiveLink href=\"/\">Home</ActiveLink>\n      </li>\n\n      <li className='Menu__link'>\n        <ActiveLink href=\"/info\">Info</ActiveLink>\n      </li>\n\n      <li className='Menu__link'>\n        <ActiveLink href=\"/contact\">Contact</ActiveLink>\n      </li>\n    </ul>\n  )\n}\n","import React, {useState} from 'react'\nimport './styles.css'\nimport { useLocation } from 'wouter'\n\nexport default function Search () {\n  const [keyword, setKeyword] = useState('')\n  const [path, pushLocation] = useLocation()\n\n  const handleSubmit = evt => {\n    evt.preventDefault()\n    const keywordToUse = keyword || ''\n    pushLocation(`/search/${keywordToUse}`)\n  }\n\n  const handleChange = evt => {\n    setKeyword(evt.target.value)\n  }\n\n  return <div className='Search'>\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"search\"\n        className='Search__input'\n        onChange={handleChange}\n        value={keyword}\n        placeholder='Search for gifs!'\n        />\n    </form>\n  </div>\n}\n","import React from 'react'\nimport Menu from 'components/Menu'\nimport Search from 'components/Search'\nimport './styles.css'\n\nexport default function Header () {\n  return (\n    <div className='Header'>\n      <div className='Logo Header__logo'>\n        <h1>The page of the gifs</h1>\n      </div>\n\n      <div className='Header__menu'>\n        <Menu />\n        <Search />\n      </div>\n\n    </div>\n  )\n}\n","import React from 'react'\nimport './App.css'\nimport { Route, Router } from 'wouter'\nimport Home from 'pages/Home'\nimport SearchResults from 'pages/SearchResults'\nimport Detail from 'pages/Detail'\n\nimport { GifsContextProvider } from 'context/GifsContext'\nimport useHashLocation from 'hooks/useHashLocation'\nimport Info from 'pages/Info'\nimport Contact from 'pages/Contact'\nimport Header from 'components/Header'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <section className=\"App-content\">\n        <Router hook={useHashLocation}>\n          <Header />\n\n          <GifsContextProvider>\n            <Route\n              component={Home}\n              path='/' />\n\n            <Route\n              component={SearchResults}\n              path='/search/:keyword' />\n\n            <Route\n              component={Detail}\n              path='/gif/:id' />\n\n            <Route\n              component={Info}\n              path='/info' />\n\n            <Route\n              component={Contact}\n              path='/contact' />\n\n          </GifsContextProvider>\n        </Router>\n      </section>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}